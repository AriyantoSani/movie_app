// Mocks generated by Mockito 5.4.5 from annotations
// in movie_app/test/repositories/movie_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:movie_app/data/datasources/movie_local_data_source.dart' as _i5;
import 'package:movie_app/data/datasources/movie_remote_data_source.dart'
    as _i3;
import 'package:movie_app/data/models/movie_model.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovieModel_0 extends _i1.SmartFake implements _i2.MovieModel {
  _FakeMovieModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRemoteDataSource extends _i1.Mock
    implements _i3.MovieRemoteDataSource {
  MockMovieRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.MovieModel>> getMovies(int? page) => (super.noSuchMethod(
        Invocation.method(
          #getMovies,
          [page],
        ),
        returnValue: _i4.Future<List<_i2.MovieModel>>.value(<_i2.MovieModel>[]),
      ) as _i4.Future<List<_i2.MovieModel>>);

  @override
  _i4.Future<List<_i2.MovieModel>> searchMovies(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMovies,
          [query],
        ),
        returnValue: _i4.Future<List<_i2.MovieModel>>.value(<_i2.MovieModel>[]),
      ) as _i4.Future<List<_i2.MovieModel>>);

  @override
  _i4.Future<_i2.MovieModel> getMovieDetails(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getMovieDetails,
          [id],
        ),
        returnValue: _i4.Future<_i2.MovieModel>.value(_FakeMovieModel_0(
          this,
          Invocation.method(
            #getMovieDetails,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.MovieModel>);
}

/// A class which mocks [MovieLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieLocalDataSource extends _i1.Mock
    implements _i5.MovieLocalDataSource {
  MockMovieLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.MovieModel>> getFavoriteMovies() => (super.noSuchMethod(
        Invocation.method(
          #getFavoriteMovies,
          [],
        ),
        returnValue: _i4.Future<List<_i2.MovieModel>>.value(<_i2.MovieModel>[]),
      ) as _i4.Future<List<_i2.MovieModel>>);

  @override
  _i4.Future<void> addMovieToFavorites(_i2.MovieModel? movie) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMovieToFavorites,
          [movie],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> removeMovieFromFavorites(int? movieId) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeMovieFromFavorites,
          [movieId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> isMovieFavorite(int? movieId) => (super.noSuchMethod(
        Invocation.method(
          #isMovieFavorite,
          [movieId],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
